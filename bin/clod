#!/bin/env bash
set -euo pipefail

reinit=${CLOD_REINIT:-false}
config=${CLOD_CONFIG:-$HOME/.claude.json}

# Is this directory initialized?
initialize() {
  mkdir -p .clod/claude

  # Use an existing config if available.
  if [[ ! -f .clod/claude/claude.json && -f "$config" ]]; then
    cp "$config" .clod/claude/claude.json
  fi

  local cwd=$(pwd)

  if [[ ! -f .clod/name ]]; then
    local name=$(basename "$cwd")
    printf '%s\n' "$name" > .clod/name
  else
    local name=$(<.clod/name)
  fi

  # Create a unique id for this directory so that
  # we can have a short name.
  if [[ ! -f .clod/id ]]; then
    local uuid=$(uuidgen)
    local id=${uuid:0:8}
    printf '%s\n' "$id" > .clod/id
  else
    local id=$(<.clod/id)
  fi

  if [[ ! -f .clod/Dockerfile ]]; then
    cat <<EOF > .clod/Dockerfile
FROM ubuntu:24.04

ARG DEBIAN_FRONTEND=noninteractive
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \\
    --mount=type=cache,sharing=locked,target=/var/lib/apt \\
    apt-get update \\
 && apt-get install -qq -y npm

COPY <<DEOF /usr/bin/claude-wrapper
#!/bin/bash
set -euo pipefail

if [[ -f ~/.claude/claude.json ]]; then
  cp ~/.claude/claude.json ~/.claude.json
fi

trap 'cp ~/.claude.json ~/.claude/claude.json' EXIT

claude "\\\$@"
DEOF
RUN chmod u+x /usr/bin/claude-wrapper

ARG GROUP_ID
ARG GROUP_NAME
ARG USER_ID
ARG USER_NAME
RUN (groupdel \$(getent group "\$GROUP_ID" | cut -d: -f1) || true) \\
 && (userdel \$(getent passwd "\$USER_ID" | cut -d: -f1) || true) \\
 && groupadd -g "\$GROUP_ID" "\$GROUP_NAME" \\
 && useradd -m -u "\$USER_ID" -g "\$GROUP_NAME" "\$USER_NAME"

USER "\$USER_NAME"
WORKDIR "/home/\$USER_NAME"

RUN mkdir ~/.npm \\
 && npm config set prefix ~/.npm \\
 && npm install -g @anthropic-ai/claude-code
ENV PATH="\$PATH:/home/\$USER_NAME/bin:/home/\$USER_NAME/.npm/bin"

ENTRYPOINT ["claude-wrapper"]

# Uncomment to add additional apt dependencies:
#RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \\
#    --mount=type=cache,sharing=locked,target=/var/lib/apt \\
#    apt-get update \\
# && apt-get install -qq -y jq
EOF
  fi

  if [[ ! -f .clod/build ]]; then
    cat <<EOF > .clod/build
#!/bin/env bash
set -euo pipefail

name=\$(<.clod/name)
id=\$(<.clod/id)

# Who are you?
user_id=\$(id -u)
user_name=\$(id -nu)
group_id=\$(id -u)
group_name=\$(id -nu)

exec docker build \\
  --build-arg "USER_ID=\$user_id" \\
  --build-arg "USER_NAME=\$user_name" \\
  --build-arg "GROUP_ID=\$group_id" \\
  --build-arg "GROUP_NAME=\$group_name" \\
  -t "clod-\$name-\$id" \\
  - < .clod/Dockerfile
EOF
  fi
  chmod u+x .clod/build

  if [[ ! -f .clod/run ]]; then
    cat <<EOF > .clod/run
#!/bin/env bash
set -euo pipefail

cwd=\$(pwd)
name=\$(<.clod/name)
id=\$(<.clod/id)
user_name=\$(id -nu)

if [[ -v CLOD_ENTRYPOINT ]]; then
  entrypoint="--entrypoint \$CLOD_ENTRYPOINT"
fi

exec docker run -it --rm \\
  --hostname "clod-\$name-\$id" \\
  -v "\$cwd:\$cwd" \\
  -v "\$cwd/.clod:\$cwd/.clod:ro" \\
  -v "\$cwd/.clod/claude:/home/\$user_name/.claude" \\
  -w "\$cwd" \\
  \${entrypoint:-} \\
  "clod-\$name-\$id" "\$@"
EOF
  fi
  chmod u+x .clod/run
}

if [[ ! -d .clod || $reinit == 'true' ]]; then
  read -p "Initialize the .clod directory? [Y/n] " yn
  case $yn in
    [Yy]* | '')
      printf 'initializing...\n'
      initialize
      ;;
    *)
      exit
      ;;
  esac
fi

# It's go time!
.clod/build
exec .clod/run "$@"
